---
import Base from "../components/Base.astro";

import { getSession, type Session } from "../utils/auth/auth";

let hackatimeToken = Astro.cookies.get("wakapi-token")?.value;

// save the value to cookies on post
if (Astro.request.method === "POST") {
    const form = await Astro.request.formData()
    Astro.cookies.set("wakapi-token", form.get("token")?.toString()!, { path: "/" });
    hackatimeToken = form.get("token")?.toString()!;
}

export interface Summary {
    user_id:           string;
    from:              Date;
    to:                Date;
    projects:          Category[];
    languages:         Category[];
    editors:           Category[];
    operating_systems: Category[];
    machines:          Category[];
    labels:            Category[];
    branches:          null;
    entities:          null;
    categories:        Category[];
}

export interface Category {
    key:   string;
    total: number;
}

let summary: Summary | null = null;
let errorMsg: string | null = null;

if (hackatimeToken && hackatimeToken !== "") {
    summary = await fetch("https://waka.hackclub.com/api/summary?from=2024-09-19&to=2024-09-29", {
        headers: {
            Authorization: `Bearer ${btoa(hackatimeToken!)}`
        }
    }).then(res => {
        if (res.status === 401) {
            throw new Error("Unauthorized; check if your token is correct");
        }
        return res.json();
    }).catch(error => {
        errorMsg = error.message;
    });
}

function formatTime(seconds: number) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsFormatted = Math.floor(seconds % 60);

    return `${hours > 0 ? hours + "h " : ""} ${minutes > 0 ? minutes + "m " : ""} ${secondsFormatted > 0 ? secondsFormatted + "s" : ""}`;
}

let session: Session | null = null;
const sessionCookie = Astro.cookies.get("session")?.value;
if (sessionCookie !== undefined) {
	session = getSession(sessionCookie);
}
---

<Base>
    <p>Hi {session?.profile.name}!</p>

    {
		errorMsg && (
			<p class="text-red-500">{errorMsg}</p>
		)
	}

    { (!hackatimeToken || hackatimeToken == "" || errorMsg) && (
        <form method="post" class="flex flex-row">
            <input type="text" name="token" class="input-default m-2" required value={hackatimeToken} placeholder="Enter you hackatime token here" />
            <button type="submit" class="btn-primary m-2">Submit</button>
        </form>
    )}

    { (hackatimeToken && hackatimeToken != "" && summary) && (
        <p>Thank you for submitting your token! It is: <span class="inline-code">{hackatimeToken}</span></p>

        <div id="projects">
            <h4 class="mt-10">You have {summary.projects.length} projects with a combined total of <span class="inline-code">{formatTime(summary.projects.reduce((total, project) => total + project.total, 0))}</span></h4>
            <div class="grid grid-cols-3 gap-4 mt-5">
                {summary.projects.map((project, index) => (
                    <div data-swapy-slot={index} class="min-h-24 border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid border-4 rounded-lg">
                        <div class="bg-secondary-primary dark:bg-secondary-dark-primary rounded-lg shadow-md p-4" data-swapy-item={index}>
                            <h3 class="text-xl font-bold">{project.key}</h3>
                            <p class="text-text-secondary dark:text-text-dark-secondary">
                                {formatTime(project.total)}
                            </p>
                        </div>
                    </div>
                ))}
            </div>

            <h4 class="mt-10">Please drag all the projects that are apart of this repo into the box below</h4>

            <div class="bg-secondary-secondary dark:bg-secondary-dark-secondary grow m-2 border-primary border-solid border-4 rounded-md grid grid-cols-2 gap-4">
                <form style="grid-column: span 2" class="flex flex-row">
                    <input type="url" name="repo" id="repo" class="input-default border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid rounded-md border-4 m-2"/>
                    <input type="submit" value="submit" class="btn-primary m-2" id="project-submit"/>
                </form>

                {summary.projects.map((project, index) => (
                    <div data-swapy-slot={"project-" + index} class="m-2 min-h-24 border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid border-4 rounded-lg"></div>
                ))}
            </div>
        </div>
    )}

</Base>

<script>
    import { createSwapy } from 'swapy'

    const container = document.querySelector('#projects')

    const swapy = createSwapy(container, {
        animation: 'dynamic' // or spring or none
    })

    swapy.enable(true)
</script>
