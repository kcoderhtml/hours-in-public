---
import Base from "../components/Base.astro";

import { AirtableTs } from "airtable-ts";
import { ProjectDockTable } from "./api/airtableTypes";

const db = new AirtableTs({ apiKey: process.env.AIRTABLE_API_KEY });

import { getSession, type Session } from "../utils/auth/auth";

let session: Session | null = null;
const sessionCookie = Astro.cookies.get("session")?.value;
if (sessionCookie !== undefined) {
	session = getSession(sessionCookie);
}

const airtableProjects = await db.scan(ProjectDockTable, {filterByFormula: `{Slack ID} = "${session?.profile.id}"`});

let hackatimeToken = Astro.cookies.get("wakapi-token")?.value;

// save the value to cookies on post
if (Astro.request.method === "POST") {
    const form = await Astro.request.formData()
    Astro.cookies.set("wakapi-token", form.get("token")?.toString()!, { path: "/" });
    hackatimeToken = form.get("token")?.toString()!;
}

export interface Summary {
    user_id:           string;
    from:              Date;
    to:                Date;
    projects:          Category[];
    languages:         Category[];
    editors:           Category[];
    operating_systems: Category[];
    machines:          Category[];
    labels:            Category[];
    branches:          null;
    entities:          null;
    categories:        Category[];
}

export interface Category {
    key:   string;
    total: number;
}

let summary: Summary | null = null;
let errorMsg: string | null = null;

if (hackatimeToken && hackatimeToken !== "") {
    summary = await fetch("https://waka.hackclub.com/api/summary?from=2024-09-19&to=2024-09-29", {
        headers: {
            Authorization: `Bearer ${btoa(hackatimeToken!)}`
        }
    }).then(res => {
        if (res.status === 401) {
            throw new Error("Unauthorized; check if your token is correct");
        }
        return res.json();
    }).catch(error => {
        errorMsg = error.message;
    });
}

const projects: Category[] = summary?.projects.filter(project => !airtableProjects.some(airtableProject => airtableProject.projectId === project.key)) ?? [];

function formatTime(seconds: number) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsFormatted = Math.floor(seconds % 60);

    return `${hours > 0 ? hours + "h " : ""} ${minutes > 0 ? minutes + "m " : ""} ${secondsFormatted > 0 ? secondsFormatted + "s" : ""}`;
}
---

<Base>
    <p>Hi {session?.profile.name}!</p>

    {
		errorMsg && (
			<p class="text-red-500">{errorMsg}</p>
		)
	}

    { (!hackatimeToken || hackatimeToken == "" || errorMsg) && (
        <form method="post" class="flex flex-row">
            <input type="text" name="token" class="input-default m-2" required value={hackatimeToken} placeholder="Enter you hackatime token here" />
            <button type="submit" class="btn-primary m-2">Submit</button>
        </form>
    )}

    { (hackatimeToken && hackatimeToken != "" && summary && projects.length > 0) && (
        <p>Thank you for submitting your token! It is: <span class="inline-code">{hackatimeToken}</span></p>

        <div id="projects">
            <h4 class="mt-10">You have {projects.length} projects with a combined total of <span class="inline-code" data-hackatime-id={summary.user_id} id="hackatime_token">{formatTime(projects.reduce((total, project) => total + project.total, 0))}</span></h4>
            <div class="grid grid-cols-3 gap-4 mt-5" id="projects-drag-from">
                {projects.map((project, index) => (
                    <div data-swapy-slot={index} class="min-h-24 border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid border-4 rounded-lg">
                        <div class="bg-secondary-primary dark:bg-secondary-dark-primary rounded-lg shadow-md p-4" data-swapy-item={index}>
                            <h3 class="text-xl font-bold">{project.key}</h3>
                            <p class="text-text-secondary dark:text-text-dark-secondary" data-seconds={project.total}>
                                {formatTime(project.total)}
                            </p>
                        </div>
                    </div>
                ))}
            </div>

            <div id="project-form">
                <h4 class="mt-10">Please choose a project repo and projects</h4>
                <p>Drag the projects related to the repo into the boxes below and then hit submit</p>

                <div class="bg-secondary-secondary dark:bg-secondary-dark-secondary grow m-2 border-primary border-solid border-4 rounded-md grid grid-cols-3 gap-4">
                    <form style="grid-column: span 3" class="flex flex-row">
                        <input type="url" name="repo" id="repo" placeholder="Enter your repo url" class="input-default border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid rounded-md border-4 m-2" required pattern="https?://.+"/>
                        <input type="submit" value="submit" class="btn-primary m-2" id="project-submit"/>
                        <h2 class="flex items-center p-2 text-secondary-primary dark:text-secondary-dark-primary" id="submission-count">0</h2>
                        <span class="hidden text-primary dark:text-primary"></span>
                    </form>

                    {projects.map((project, index) => (
                        <div data-swapy-slot={"project-" + index} class="m-2 min-h-[6.5rem] border-secondary-tertiary dark:border-secondary-dark-tertiary border-solid border-4 rounded-lg" id={"project-submission-"+index}></div>
                    ))}
                </div>
            </div>

            <div id="project-view" class="hidden">
                <div class="bg-secondary-secondary dark:bg-secondary-dark-secondary grow m-2 border-primary border-solid border-4 rounded-md p-4">
                <h3>Submitted Projects:</h3>
                <ul id="project-list-final">
                </ul>

                <p>Are you ready to submit?</p>
                <button type="submit" class="btn-primary m-2" id="final-submit">Submit</button>
            </div>
            </div>
        </div>
    )}

    { (hackatimeToken && hackatimeToken != "" && summary && projects.length === 0) && (
        <p>Thank you for submitting your token! It is: <span class="inline-code">{hackatimeToken}</span></p>
        <p class="mt-4">You have no projects left to submit.</p>
    )}


</Base>

<script>
    import { createSwapy } from 'swapy'

    const container = document.querySelector('#projects')

    const swapy = createSwapy(container, {
        animation: 'dynamic' // or spring or none
    })

    swapy.enable(true)
</script>

<script>
    let submittedProjects: {repo: string, projects: {name: string, time: string, seconds: number}[]}[] = []
    const projectSubmitButton = document.querySelector('#project-submit') as HTMLButtonElement;
    const repo = document.querySelector('#repo') as HTMLInputElement;
    const submissionCount = document.querySelector('#submission-count') as HTMLHeadingElement;
    const projectView = document.querySelector('#project-view') as HTMLDivElement;
    const projectsDragFrom = document.querySelector('#projects-drag-from') as HTMLDivElement;
    const projectForm = document.querySelector('#project-form') as HTMLDivElement;
    const projectListFinal = document.querySelector('#project-list-final') as HTMLUListElement

    const hackatimeToken = document.querySelector('#hackatime_token') as HTMLElement;

    // listen for submit events
    projectSubmitButton.addEventListener('click', async (event) => {
        event.preventDefault();

        // get all the projects that are in the swappy div
        const projects = Array.from(document.querySelectorAll('[id^="project-submission-"]')).filter(project => project.children.length > 0) as HTMLDivElement[];

        if (projects.length === 0 || repo.value == "" || !repo.validity) {
            let message = ""
            if (projects.length === 0) {
                message += "Please drag some projects into the boxes\n\n"
            }
            if (repo.value == "") {
                message += "Please fill in the repo"
            } else if (!repo.validity.valid) {
                message += "Please fill in a valid url begining with http or https"
            }
            
            alert(message);
            return;
        }

        // get the project name and the amount of time on each project
        const projectData = Array.from(projects).map((project) => {
            const name = project.querySelector('h3')!.innerText;
            const time = project.querySelector('p')!.innerText;
            const seconds = parseInt(project.querySelector('p')!.dataset.seconds!);

            return {
                name,
                time,
                seconds
            }
        });

        submittedProjects.push({
            repo: repo.value,
            projects: projectData
        });

        // add an item to the prejects view div without un hidding it
        projectListFinal.innerHTML = submittedProjects.map((project, index) => 
            `<li class="bg-secondary-tertiary dark:bg-secondary-dark-tertiary m-2 border-primary border-solid border-2 rounded-md p-4">
                <p><strong>Repo:</strong> <a href="${project.repo}" target="_blank">${project.repo}</a></p>
                <p><strong>Projects:</strong></p>
                <ul>
                ${project.projects.map((p) => `
                    <li>${p.name} - ${p.time}</li>
                `).join('')}
                </ul>
            </li>
            `).join('');


        // animate the div sliding off screen quickly
        projects.forEach((project) => {
            project.style.transition = 'transform 0.5s';
            project.style.transform = 'translateX(100%)';
        });

        // clear the repo input
        repo.value = "";
    
        // clear the project submission divs
        projects.forEach((project) => {
            project.remove();
        });

        // hide move everything back and then show
        setTimeout(() => {
            projects.forEach((project) => {
                project.style.transition = 'transform 0s';
                project.style.transform = 'translateX(0)';
            });
        }, 500);

        // add the text-primary class to the counter and update it
        submissionCount.classList.add('text-primary')
        submissionCount.classList.remove('text-secondary-primary', 'dark:text-secondary-dark-primary');
        submissionCount.innerText = submittedProjects.length.toString();

        const projectsLeft = projectsDragFrom.children.length - submittedProjects.reduce((total, project) => total + project.projects.length, 0);

        if (projectsLeft == 0) {
            projectView.classList.remove('hidden');
            projectForm.classList.add('hidden');
            projectsDragFrom.classList.add('hidden');
        }
    });

    const finalSubmit = document.querySelector('#final-submit') as HTMLButtonElement;

    finalSubmit.addEventListener('click', async (event) => {
        event.preventDefault();

        finalSubmit.disabled = true;
        // Add spinning cursor style
        const cursor = document.querySelector('body') as HTMLBodyElement;
        cursor.style.cursor = 'wait';

        const response = await fetch('/api/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                submittedProjects,
                hackatimeUser: hackatimeToken.dataset.hackatimeId
            })
        });

        if (response.ok) {
            alert('Successfully submitted your projects!');
            window.location.href = '/done';
        } else {
            alert('Failed to submit your projects');
        }
    });
</script>