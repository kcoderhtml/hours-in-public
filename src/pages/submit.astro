---
import Base from "../components/Base.astro";

let hackatimeToken = Astro.cookies.get("wakapi-token")?.value;

// save the value to cookies on post
if (Astro.request.method === "POST") {
    const form = await Astro.request.formData()
    Astro.cookies.set("wakapi-token", form.get("token")?.toString()!, { path: "/" });
    hackatimeToken = form.get("token")?.toString()!;
}

export interface Summary {
    user_id:           string;
    from:              Date;
    to:                Date;
    projects:          Category[];
    languages:         Category[];
    editors:           Category[];
    operating_systems: Category[];
    machines:          Category[];
    labels:            Category[];
    branches:          null;
    entities:          null;
    categories:        Category[];
}

export interface Category {
    key:   string;
    total: number;
}

let summary: Summary | null = null;
let errorMsg: string | null = null;

if (hackatimeToken && hackatimeToken !== "") {
    summary = await fetch("https://waka.hackclub.com/api/summary?from=2024-09-19&to=2024-09-29", {
        headers: {
            Authorization: `Bearer ${btoa(hackatimeToken!)}`
        }
    }).then(res => {
        if (res.status === 401) {
            throw new Error("Unauthorized; check if your token is correct");
        }
        return res.json();
    }).catch(error => {
        errorMsg = error.message;
    });
}

function formatTime(seconds: number) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsFormatted = Math.floor(seconds % 60);

    return `${hours > 0 ? hours + "h " : ""} ${minutes > 0 ? minutes + "m " : ""} ${secondsFormatted > 0 ? secondsFormatted + "s" : ""}`;
}

---

<Base>
    <p>Hi!</p>

    {
		errorMsg && (
			<p class="text-red-500">{errorMsg}</p>
		)
	}

    { (!hackatimeToken || hackatimeToken == "" || errorMsg) && (
        <form method="post" class="flex flex-row">
            <input type="text" name="token" class="input-default m-2" required value={hackatimeToken} placeholder="Enter you hackatime token here" />
            <button type="submit" class="btn-primary m-2">Submit</button>
        </form>
    )}

    { (hackatimeToken && hackatimeToken != "" && summary) && (
        <p>Thank you for submitting your token! It is: <span class="inline-code">{hackatimeToken}</span></p>
        
        <p>You have {summary.projects.length} projects with a combined total of <span class="inline-code">{formatTime(summary.projects.reduce((total, project) => total + project.total, 0))}</span></p>
        <div class="grid grid-cols-3 gap-4 mt-5">
            {summary.projects.map((project, index) => (
                <div class="bg-secondary-primary dark:bg-secondary-dark-primary rounded-lg shadow-md p-4">
                    <h3 class="text-xl font-bold">{project.key}</h3>
                    <p class="text-text-secondary dark:text-text-dark-secondary">
                        {formatTime(project.total)}
                    </p>
                </div>
            ))}
        </div>
    )}

</Base>